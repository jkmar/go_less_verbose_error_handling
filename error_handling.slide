Less verbose error handling

* Agenda

- How errors are handled now
- How we can do better
- How errors will be handled in the future
- Summary

* How errors are handled now

* Docker

.code examples/docker.go /START/,/END/

* ETCD

.code examples/etcd.go /START/,/END/

* Kubernetes

.code examples/kubernetes.go /START/,/END/

* and many more

.image resources/most_common_words.png

* How we can do better

* Example

.code standard/main.go /START getCommandsFromFile/,/END getCommandsFromFile/

* Example

.code standard/main.go /START readConfiguration/,/END readConfiguration/

* Example

.code standard/main.go /START parseConfiguration/,/END parseConfiguration/

* Example

.code standard/main.go /START calculateCommands/,/END calculateCommands/

* Example

.code standard/main.go /START calculateDownCommands/,/END calculateDownCommands/

* Example

.code standard/main.go /START calculateUpCommands/,/END calculateUpCommands/

* Example

.play standard/main.go /START main/,/END main/

* First improvement

* Error in struct

.code standard/main.go /START readConfiguration/,/END readConfiguration/

* Error in struct

we are using the same function twice
maybe we can move error handling there?

.code standard/main.go /START readConfiguration ReadLine/,/END readConfiguration ReadLine/

* Error in struct

we can create stateful reader with error

.code error_in_struct/main.go /START ErrorReader/,/END ErrorReader/

.code error_in_struct/main.go /START NewErrorReader/,/END NewErrorReader/

.code error_in_struct/main.go /START ErrorReader Err/,/END ErrorReader Err/

* Error in struct

and then check error inside ReadLine function

.code error_in_struct/main.go /START ErrorReader ReadLine/,/END ErrorReader ReadLine/

* Error in struct

.code standard/main.go /START readConfiguration/,/END readConfiguration/ HL_error_in_struct

* Error in struct

.code error_in_struct/main.go /START readConfiguration/,/END readConfiguration/ HL_error_in_struct

* Error in struct

.play error_in_struct/main.go /START main/,/END main/

* Second improvement

* Generated code for error in struct

.code standard/main.go /START parseConfiguration/,/END parseConfiguration/

* Generated code for error in struct

we could try using the same approach here,
but now we have two function instead of one

.code standard/main.go /START parseConfiguration ErrorChecker/,/END parseConfiguration ErrorChecker/

* Generated code for error in struct

Error checker will be similar

.code check/main.go /START NewErrorChecker/,/END NewErrorChecker/

.code check/main.go /START ErrorChecker Err/,/END ErrorChecker Err/

* Generated code for error in struct

but the library functions can be generated

.code check/main.go /START ErrorChecker StrconvAtoi/,/END ErrorChecker StrconvAtoi/

.code check/main.go /START ErrorChecker JsonUnmarshal/,/END ErrorChecker JsonUnmarshal/

* Generated code for error in struct

.code standard/main.go /START parseConfiguration/,/END parseConfiguration/ HL_check

* Generated code for error in struct

.code check/main.go /START parseConfiguration/,/END parseConfiguration/ HL_check

* Generated code for error in struct

.play check/main.go /START main/,/END main/

* Third improvement

* Monad

.code standard/main.go /START calculateCommands/,/END calculateCommands/

* Monad

we have multiple custom functions,
so the previous approaches doesn't work

.code standard/main.go /START calculateCommands/,/END calculateCommands/

* Monad

we can try creating a struct without error this time

.code monad/main.go /START ConfigurationCalculator/,/END ConfigurationCalculator/

.code monad/main.go /START NewConfigurationCalculator/,/END NewConfigurationCalculator/

.code monad/main.go /START ConfigurationCalculator GetCommands/,/END ConfigurationCalculator GetCommands/

* Monad

and return error instead

.code monad/main.go /START ConfigurationCalculator calculateDownCommands/,/END ConfigurationCalculator calculateDownCommands/

.code monad/main.go /START ConfigurationCalculator calculateUpCommands/,/END ConfigurationCalculator calculateUpCommands/

* Monad

then we can chain these calls until the first error

.code monad/main.go /START Do/,/END Do/

* Monad

.code standard/main.go /START calculateCommands/,/END calculateCommands/ HL_monad

* Monad

.code monad/main.go /START calculateCommands/,/END calculateCommands/ HL_monad

* Monad

.play monad/main.go /START main/,/END main/

* Fourth improvement

* Generic Monad

.code standard/main.go /START getCommandsFromFile/,/END getCommandsFromFile/

* Generic Monad

now we have multiple variables
each of which we are using only once

.code standard/main.go /START getCommandsFromFile GenericMonad/,/END getCommandsFromFile GenericMonad/

* Generic Monad

the previous approach gives too much variables

.code generic_monad/main.go /START CommandGetter/,/END CommandGetter/

* Generic Monad

and too much boilerplate with errors

.code generic_monad/main.go /START CommandGetter readConfiguration/,/END CommandGetter readConfiguration/

.code generic_monad/main.go /START CommandGetter parseConfiguration/,/END CommandGetter parseConfiguration OMIT/

.code generic_monad/main.go /START CommandGetter calculateCommands/,/END CommandGetter calculateCommands/

* Generic Monad

we could try using generic functions taking and returning `interface{}` arguments

.code generic_monad/main.go /START Func/,/END Func/

.code generic_monad/main.go /START DoEither/,/END DoEither/

* Generic Monad

unfortunately this does not compile

.play generic_monad_wrong/main.go /START getCommandsFromFile doesNotCompile/,/END getCommandsFromFile doesNotCompile/

* Generic Monad

however we can use reflect to wrap our functions

.code generic_monad/main.go /START EitherWrap/,/END EitherWrap/

* Generic Monad

to make this work we also need to make the result type

.code generic_monad/main.go /START TypeStringSlice/,/END TypeStringSlice/

* Generic Monad

.code standard/main.go /START getCommandsFromFile/,/END getCommandsFromFile/ HL_generic_monad

* Generic Monad

.code generic_monad/main.go /START getCommandsFromFile/,/END getCommandsFromFile/ HL_generic_monad

* Generic Monad

.play generic_monad/main.go /START main/,/END main/

* Go 2

* Go 2

in go 2 we will have `check` statement which returns error if called function returned an error

.code go2/go2.go /START getCommandsFromFile/,/END getCommandsFromFile/ HL_check

* Go 2

.code go2/go2.go /START readConfiguration/,/END readConfiguration/ HL_check

* Go 2

.code go2/go2.go /START parseConfiguration/,/END parseConfiguration/ HL_check

* Go 2

.code go2/go2.go /START calculateCommands/,/END calculateCommands/ HL_check

* Go 2

can we recreate this behavior in go 1?

* Go 2

we can, but we have to use panics

.code go2/main.go /START Error/,/END Error/

.code go2/main.go /START NewError/,/END NewError/

.code go2/main.go /START check/,/END check/

* Go 2

we have to have custom error to distinguish between our errors and different panics

.code go2/main.go /START handle/,/END handle/

* Go 2

we don not need reflect, we can use type assertions

.code go2/main.go /START getCommandsFromFile/,/END getCommandsFromFile/ HL_check

* Go 2

.play go2/main.go /START main/,/END main/

* Go 2

also we don't lose stack traces from panics with this approach

.code go2_panic/main.go /START calculateDownCommands/,/END calculateDownCommands/

.play go2_panic/main.go /START main/,/END main/

* Summary

* Summary

we have covered the following way of error handling:

- error in struct
- error in struct with generated code
- monads with stateful structs
- generic monads with functions
- go2 style checks

* Summary

some of these methods are used in practice

.code examples/bufio.go /START Writer/,/END Writer/

.code examples/bufio.go /START Writer Flush/,/END Writer Flush/
